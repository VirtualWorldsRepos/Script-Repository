//PONY FALLOUT SCRAP PILE
integer ticks;
integer timeframeticks = 1;

list hash()
{
    integer rand = llRound(llFrand(99999)) + 99999;
    
    while(~llListFindList(recent_randout,[rand]))
    rand = llRound(llFrand(99999)) + 99999;
    
    recent_randout += [rand,45];
    
    integer unix = llGetUnixTime();
    string keyhash = llMD5String( (string)llGetOwner() + (string)rand + (string)unix,rand+unix+1337);
    return [keyhash,rand,unix];
}

encode_message(string target_id, list params_out)
{
    if(target_id == NULL_KEY)
    llRegionSay(chan(target_id),llDumpList2String(params_out + hash(),"|"));
    else
    llRegionSayTo(target_id,chan(llGetOwnerKey(target_id)),llDumpList2String(params_out + hash(),"|"));
}

list recent_randout;
list recent_hashtags;
hashprocess()
{
    integer x;
    for(x=0;x<llGetListLength(recent_hashtags);x+=2)
    {
        integer entry = llList2Integer(recent_hashtags,x+1);
        entry--;
        if(entry<0)
        {
            recent_hashtags = llDeleteSubList(recent_hashtags,x,x+1);
            x-=2;
        }
        else
        {
            recent_hashtags = llListReplaceList(recent_hashtags,[entry],x+1,x+1);
        }
    }
    for(x=0;x<llGetListLength(recent_randout);x+=2)
    {
        integer entry = llList2Integer(recent_randout,x+1);
        entry--;
        if(entry<0)
        {
            recent_randout = llDeleteSubList(recent_randout,x,x+1);
            x-=2;
        }
        else
        {
            recent_randout = llListReplaceList(recent_randout,[entry],x+1,x+1);
        }
    }
}

process_message(string m, string id)
{
    list p = llParseString2List(m,["|"],[]);
    string keyhash = llList2String(p,-3);
    //does the hash match
    if(keyhash == llMD5String( (string)llGetOwnerKey(id) + llList2String(p,-2) + llList2String(p,-1),llList2Integer(p,-2) + llList2Integer(p,-1) + 1337))
    {
        //was the message sent in the last 30 seconds
        if((llGetUnixTime() - llList2Integer(p,-1)) < 30)
        {
            //have we already received this exact message (we will never encode the same hash twice from an object, which means this only happens if people are spoofing messages)
            if(~llListFindList(recent_hashtags,[keyhash]))
            return;
            else recent_hashtags += [keyhash,45];//45 seconds to message deprecator to ensure no 30sec windows ever get hit perfect
        }
        else return;
    }
    else return;
    
    //ok so now that we've filtered out the bullshit, let's do some stuff
    integer x;
    while(x < (llGetListLength(p) - 3))
    {
        string cmd = llList2String(p,x);
        if(cmd=="ScrapQuery")
        {
            if(give_a_scrap)
            {
                integer rand = llFloor(llFrand(999999999));
                rand = rand % total();
                string item = finditemslot(rand);
                if(item!="!NOTHING")
                llGiveInventory(llGetOwnerKey(id),item);
                randomize(1);
            }
            x++;
        }
        else x++;
    }
}

string finditemslot(integer index)
{
    integer x;
    integer window;
    for(x=0;x<llGetListLength(loaded_items);x+=item_stride)
    {
        window += llList2Integer(loaded_items,x+1);
        if(window >= index)
        return llList2String(loaded_items,x);
    }
    return "!NOTHING";
}

integer item_stride = 2;
integer total()
{
    integer x;
    integer out;
    for(x=0;x<llGetListLength(loaded_items);x+=item_stride)
    {
        out += llList2Integer(loaded_items,x+1);
    }
    return out;
}

integer chan(string id)
{
    return (integer)("0x" + llGetSubString(id,0,4)) - 9000000;
}

integer listener;
newlisten()
{
    llListenRemove(listener);
    listener = llListen(chan(llGetOwner()),"","","");
}

//notecardy loady stuff begins here
string notereq;
integer curnoteindex;
string curnotename;
integer curnotetotallines;
integer curnoteline;

reboot()
{
    llOwnerSay("Starting up! Please stand by while I load my configuration files!");
    
    loaded_items = [];
    
    curnoteindex=0;
    curnoteline=-1;
    curnotetotallines=0;
    curnotename=llGetInventoryName(INVENTORY_NOTECARD,curnoteindex);
    notereq = llGetNumberOfNotecardLines(curnotename);
    configloadbar();
}

nextline()
{
    curnoteline++;
    notereq = llGetNotecardLine(curnotename,curnoteline);
    configloadbar();
}

configloadbar()
{
    string numlines = (string)curnotetotallines;
    if(numlines=="0")
    numlines = "?";
    
    llSetText("Loading config...\n"+curnotename+"\nCurrent Note: " + curnotename + "\nLine: " + (string)curnoteline + " / " + numlines,<0,1,1>,1);
}
//single line of data gets processed here
parsedata(string d)
{
    //blank lines
    if(llStringTrim(d,STRING_TRIM)=="")
    return;
    
    //comments
    if(!llSubStringIndex(d,"//"))
    return;
    
    //eof
    if(d==EOF)
    return;
    
    loaded_items += d;
}

list loaded_items;

//notecard line info gets processed here
parsenotedata(string d)
{
    if(d==EOF)
    {
        //next note
        curnoteindex++;
        if((curnotename=llGetInventoryName(INVENTORY_NOTECARD,curnoteindex))!="")
        {
            curnoteline=-1;
            curnotetotallines=0;
            notereq = llGetNumberOfNotecardLines(curnotename);
            configloadbar();
        }
        else
        {
            llOwnerSay("Done loading!");
            
            llSetText("",<0,0,0>,0);
            llSetText("Click to salvage scrap pile.",<0,1,0>,1);
            newlisten();
            llSetTimerEvent(1);
        }
    }
    else
    {
        if(curnotetotallines<=0)
        curnotetotallines=(integer)d;
        else
        parsedata(d);
        
        nextline();
    }
}

integer give_a_scrap;
randomize(integer yeah)
{
    ticks++;
    if((ticks % timeframeticks)==0 || yeah)
    {
        //up to 30 minutes
        timeframeticks = llCeil(llFrand(1800));
        //enable or disable looting at random
        give_a_scrap = llRound(llFrand(1));
    }
}

default
{
    on_rez(integer r)
    {
        newlisten();
    }
    state_entry()
    {
        reboot();
    }
    timer()
    {
        hashprocess();
        randomize(0);
    }
    touch_start(integer n)
    {
        while(~--n)
        {
            encode_message(llDetectedKey(n),["PleaseRespond","ScrapQuery"]);
        }
    }
    listen(integer c, string n, key i, string m)
    {
        process_message(m,i);
    }
    dataserver(key i, string d)
    {
        if(notereq!=(string)i)
        return;
        
        parsenotedata(d);
    }
}
