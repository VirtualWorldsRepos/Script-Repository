//PONY FALLOUT SCRAP VENDOR
//very short description of vendor - this is used to send messages saying 'hey you are too far away from me' or 'hey you are close enough to me'
string vendordesc = "Scrap Vendor";
//this is at the top of the script so it's easy to work with / find / etc - this is the final step of the trade-in process where the user is actually given bottlecaps, and if you're going to apply discounts/etc - this is the place to do it
payout(string id, integer regindex)
{
    //string id = llList2String(scrapregistry,regindex);
    //string type = llList2String(scrapregistry,regindex+1);
    
    //any processing for rarity or whatever can be done here if you want to bruteforce it and are bad at scripts or incapable of reverse engineering my beautiful but mostly undocumented magic
    
    integer value = llList2Integer(scrapregistry,regindex+2);
    //timeout is in slot +3 and shouldn't be used for anything important
    encode_message(id,["AddMoney",value]);
}

list scrapregistry;

list hash()
{
    integer rand = llRound(llFrand(99999)) + 99999;
    
    while(~llListFindList(recent_randout,[rand]))
    rand = llRound(llFrand(99999)) + 99999;
    
    recent_randout += [rand,45];
    
    integer unix = llGetUnixTime();
    string keyhash = llMD5String( (string)llGetOwner() + (string)rand + (string)unix,rand+unix+1337);
    return [keyhash,rand,unix];
}

encode_message(string target_id, list params_out)
{
    if(target_id == NULL_KEY)
    llRegionSay(chan(target_id),llDumpList2String(params_out + hash(),"|"));
    else
    llRegionSayTo(target_id,chan(llGetOwnerKey(target_id)),llDumpList2String(params_out + hash(),"|"));
}

list recent_randout;
list recent_hashtags;
hashprocess()
{
    integer x;
    for(x=0;x<llGetListLength(recent_hashtags);x+=2)
    {
        integer entry = llList2Integer(recent_hashtags,x+1);
        entry--;
        if(entry<0)
        {
            recent_hashtags = llDeleteSubList(recent_hashtags,x,x+1);
            x-=2;
        }
        else
        {
            recent_hashtags = llListReplaceList(recent_hashtags,[entry],x+1,x+1);
        }
    }
    for(x=0;x<llGetListLength(recent_randout);x+=2)
    {
        integer entry = llList2Integer(recent_randout,x+1);
        entry--;
        if(entry<0)
        {
            recent_randout = llDeleteSubList(recent_randout,x,x+1);
            x-=2;
        }
        else
        {
            recent_randout = llListReplaceList(recent_randout,[entry],x+1,x+1);
        }
    }
}

integer scrap_stride = 4;
registerScrap(string scrapid, string type, integer value)
{
    integer index = llListFindList(scrapregistry,[scrapid]);
    if(!~index)
    scrapregistry += [scrapid,type,value,300];
    else
    llSay(0,"Already registered.");
}

vector getpos(key i)
{return llList2Vector(llGetObjectDetails(i,[3]),0);}

//removes registered scrap active longer than 5 minutes
scrapprocess()
{
    integer x;
    for(x=0;x<llGetListLength(scrapregistry);x+=scrap_stride)
    {
        integer timeout = llList2Integer(scrapregistry,x+3);
        timeout--;
        if((timeout<=0) || (getpos(llList2String(scrapregistry,x))==ZERO_VECTOR))
        {
            scrapregistry = llDeleteSubList(scrapregistry,x,x+scrap_stride-1);
            x-= scrap_stride;
        }
        else
        scrapregistry = llListReplaceList(scrapregistry,[timeout],x+3,x+3);
    }
}

process_message(string m, string id, integer c)
{
    list p = llParseString2List(m,["|"],[]);
    string keyhash = llList2String(p,-3);
    //does the hash match
    if(keyhash == llMD5String( (string)llGetOwnerKey(id) + llList2String(p,-2) + llList2String(p,-1),llList2Integer(p,-2) + llList2Integer(p,-1) + 1337))
    {
        //was the message sent in the last 30 seconds
        if((llGetUnixTime() - llList2Integer(p,-1)) < 30)
        {
            //have we already received this exact message (we will never encode the same hash twice from an object, which means this only happens if people are spoofing messages)
            if(~llListFindList(recent_hashtags,[keyhash]))
            return;
            else recent_hashtags += [keyhash,45];//45 seconds to message deprecator to ensure no 30sec windows ever get hit perfect
        }
        else return;
    }
    else return;
    
    //ok so now that we've filtered out the bullshit, let's do some stuff
    integer x;
    while(x < (llGetListLength(p) - 3))
    {
        string cmd = llList2String(p,x);
        
        //ALL SYSTEM COMMANDS GO HERE
        if(c==syschan)
        {
            if(cmd=="ScrapRez")
            {
                //llSay(0,"Someone rezzed (or clicked lol) some debug scrap! The scrap is owned by " + llKey2Name(llList2String(p,x+1)) + " and has a value of " + llList2String(p,x+2));
                //llSay(0,llDumpList2String(p,"\n"));
                if(llVecDist(getpos(id),llGetPos())<=10)
                {
                    registerScrap(id,llList2String(p,x+1),llList2Integer(p,x+2));
                    encode_message(id,["RegisteredScrap",vendordesc]);
                }
                else encode_message(id,["TooFarFromVendor",vendordesc]);
                x+=3;
            }
            else x++;
        }
        //ALL COMMANDS FROM PLAYER HUDS GO HERE
        else
        {
            /*
            llSay(0,"Got response!");
            llSay(0,llDumpList2String(p,"\n"));
            */
            if(cmd=="ConfirmScrapTrade")
            {
                string response = llList2String(p,x+1);
                
                if(response=="Trade")
                {
                    //llSay(0,"Confirmed scrap trade! (This is the part where we go through the scrap registry, identify each key and communicate with it to tell it to die and subsequently send bottlecaps upon receiving confirmation)");
                    integer x;
                    string targetkey;
                    for(x=0;x<llGetListLength(scrapregistry);x+=scrap_stride)
                    {
                        //llSay(0,"Checking entry!");
                        targetkey = llList2String(scrapregistry,x);
                        if(llGetOwnerKey(targetkey)==llGetOwnerKey(id))
                        {
                            //llSay(0,"Targ out!");
                            //send it a message saying it has been vendored - don't give the user any bottlecaps until we've received a confirmation from the scrap saying it has lost its value and is ready to die
                            encode_message(targetkey,["ScrapVendored"]);
                            //we'll also unregister the scrap when it sends a response, so relax
                        }
                    }
                }
                else if(response=="Cancel")
                {
                    llSay(0,"Scrap trade cancelled. (At this point we just wait for the scrap to time out I guess since it only stays in the system for 5 minutes)");
                }
                x+=2;
            }
            else if(cmd=="ScrapVendoredConfirmation")
            {
                //it will die on its own but tell it to die anyway
                encode_message(id,["ScrapDie"]);
                //unregister it
                integer index = llListFindList(scrapregistry,[id]);
                if(~index)
                {
                    //send the owner the value of the object
                    payout(llGetOwnerKey(id),index);
                    scrapregistry = llDeleteSubList(scrapregistry,index,index+scrap_stride-1);
                }
                x++;
            }
            else x++;
        }
    }
}

integer chan(string id)
{
    return (integer)("0x" + llGetSubString(id,0,4)) - 9000000;
}

integer listener_system;
integer listener;
integer syschan;
newlisten()
{
    llListenRemove(listener);
    llListenRemove(listener_system);
    
    listener = llListen(chan(llGetOwner()),"","","");
    listener_system = llListen((syschan=chan(NULL_KEY)),"","","");
}

//gives you back a string that shows the value of all of the scrap for a user currently registered with the scrap vendor
string bottlecapvaluetotal(string id)
{
    //llSay(0,"Getting total scrap value for " + id);
    integer total;
    integer x;
    for(x=0;x<llGetListLength(scrapregistry);x+=scrap_stride)
    {
        //llSay(0,"Checking entry!");
        if(llGetOwnerKey(llList2String(scrapregistry,x))==id)
        {
            total += llList2Integer(scrapregistry,x+2);
        }
        //else
        //llSay(0,"Not owned by id: " + llList2String(scrapregistry,x) + " (owner: " + (string)llGetOwnerKey(llList2String(scrapregistry,x)) + ")");
    }
    //llSay(0,"Total value: " + (string)total);
    return (string)total;
}

default
{
    on_rez(integer r)
    {
        newlisten();
    }
    state_entry()
    {
        llSetText("Click to trade your scrap for caps.",<1,0,0>,1);
        newlisten();
        llSetTimerEvent(1);
    }
    timer()
    {
        hashprocess();
        scrapprocess();
    }
    touch_start(integer n)
    {
        while(~--n)
        {
            string val = bottlecapvaluetotal(llDetectedKey(n));
            if(val!="0")
            {
                encode_message(llDetectedKey(n),["DialogCallback","ConfirmScrapTrade","Trading in your scrap for bottlecaps?\nI can give you " + val + " for what you've got here.","Trade\\bCancel"]);
            }
        }
    }
    listen(integer c, string n, key i, string m)
    {
        process_message(m,i,c);
    }
}
